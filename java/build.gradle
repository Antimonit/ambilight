import org.gradle.internal.jvm.Jvm

plugins {
    id "java"
    id "application"
    id "org.jetbrains.kotlin.jvm" version "1.3.30"
    id "cpp"
}

repositories {
    jcenter()
    mavenCentral()
}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    implementation 'com.github.kurbatov:firmata4j:2.3.2'
    implementation 'org.scream3r:jssc:2.8.0'
    implementation 'org.slf4j:slf4j-api:1.7.7'
    implementation 'com.intellij:forms_rt:7.0.3'
}

test {
    systemProperty "java.library.path", file("${buildDir}/libs/nativeGdi/shared").absolutePath
}

tasks.withType(JavaExec) {
    systemProperty "java.library.path", file("${buildDir}/libs/nativeGdi/shared").absolutePath
}

// Java application configuration
application {
    mainClassName = 'ambilight.Main'
}

// C/C++ configuration
model {
    platforms {
        x64 {
            architecture "x64"
        }
    }

    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                File javaHome = Jvm.current().javaHome
                headers.srcDirs "$javaHome/include",
                        "$javaHome/include/win32",
                        "$javaHome/include/darwin",
                        "$javaHome/include/linux",
                        "$javaHome/include/freebsd"
            }
        }
    }

    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                }
                linker.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                }
            }
        }
        visualCpp(VisualCpp) { visual ->
            eachPlatform {
                linker.withArguments {args ->
                    args << "gdi32.lib"
                    args << "user32.lib"
                }
            }
        }
    }

    //noinspection GroovyAssignabilityCheck
    components {
        nativeGdi(NativeLibrarySpec) {
            targetPlatform "x64"
            sources {
                cpp {
                    source {
                        lib library: 'jdk', linkage: 'api'
                    }
                }
            }
            binaries.all {
                cppCompiler.args '-static-libgcc'
                cppCompiler.args '-static-libstdc++'
                linker.args '-static-libgcc'
                linker.args '-static-libstdc++'
            }
        }
    }
}