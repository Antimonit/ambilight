import org.gradle.internal.jvm.Jvm

plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

println("Building on OS: " + System.getProperty("os.name"))
println("Using JDK: " + System.getProperty("java.home"))

def JNI_INCLUDE_DIR = new File(Jvm.current().javaHome, "include")

library {
    linkage = [Linkage.SHARED]
    baseName = "AmbilightGdi"

    binaries.whenElementFinalized { binary ->
        binary.compileTask.get().configure {
            compilerArgs.addAll([
                    "-I" + JNI_INCLUDE_DIR,
                    "-I" + JNI_INCLUDE_DIR + "/win32",
                    "-I" + JNI_INCLUDE_DIR + "/darwin",
                    "-I" + JNI_INCLUDE_DIR + "/linux",
                    "-I" + JNI_INCLUDE_DIR + "/freebsd"
            ])
        }
    }
}

unitTest {
    baseName = "greeterTest"
}

model {
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                }
                linker.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                    args << "-lstdc++"
                }
            }
        }

        visualCpp(VisualCpp) { visual ->
            eachPlatform {
                linker.withArguments {args ->
                    args << "gdi32.lib"
                    args << "user32.lib"
                }
            }
        }
    }
}