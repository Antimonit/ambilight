import org.gradle.internal.jvm.Jvm

plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

println("Building on OS: " + System.getProperty("os.name"))
println("Using JDK: " + System.getProperty("java.home"))

def JNI_LIB_DIR = new File(Jvm.current().javaHome, "lib")
def JNI_INCLUDE_DIR = new File(Jvm.current().javaHome, "include")

println("Using JNI lib directory: $JNI_LIB_DIR")
println("Using JNI include directory: $JNI_INCLUDE_DIR")

library {
    linkage = [Linkage.STATIC, Linkage.SHARED]
    baseName = "greeter"

//    source {
//        lib library: 'jdk', linkage: 'api'
//    }
}

unitTest {
    baseName = "greeterTest"
}

model {
    repositories {
        libs(PrebuiltLibraries) {
            jdk {
                File javaHome = Jvm.current().javaHome
                headers.srcDirs "$javaHome/include",
                        "$javaHome/include/win32",
                        "$javaHome/include/darwin",
                        "$javaHome/include/linux",
                        "$javaHome/include/freebsd"
            }
        }
    }

    toolChains {
//        visualCpp(VisualCpp) {
//            installDir "C:/Program Files (x86)/Microsoft Visual Studio/2019/Community"
//            eachPlatform {
//                cppCompiler.withArguments { args ->
//                    args << "-O2"
//                    args << "-shared"
//                    args << "-m64"
//                    args << "-I" + JNI_INCLUDE_DIR
//                    args << "-I" + JNI_INCLUDE_DIR + "/win32"
//                    args << "-lgdi32"
//                }
//                linker.withArguments { args ->
//                    args << "-O2"
//                    args << "-lstdc++"
//                }
//            }
//        }

//        gcc(Gcc) {
//            eachPlatform {
////                cppCompiler.executable = "g++"
////                path "/opt/rh/devtoolset-2/root/usr/bin/gcc"
//                cppCompiler.withArguments { args ->
//                    args << "-O2"
////                    args << "-I" + SYS_INCLUDE_DIR
////                    args << "-I" + SYS_LOCAL_INCLUDE_DIR
//                    args << "-I" + JNI_INCLUDE_DIR
//                    args << "-I" + JNI_INCLUDE_DIR + "/win32"
//                    args << "-std=c++11"
//                }
//                linker.withArguments { args ->
//                    args << "-O2"
//                    args << "-lstdc++"
//                }
//            }
//        }
//        clang(Clang) {
//            eachPlatform {
//                cppCompiler.withArguments { args ->
//                    args << "-O2"
//                    args << "-I" + SYS_INCLUDE_DIR
//                    args << "-I" + SYS_LOCAL_INCLUDE_DIR
//                    args << "-I" + JNI_INCLUDE_DIR
//                    args << "-I" + JNI_INCLUDE_DIR + "/linux"
//                    args << "-std=c++11"
//                }
//                linker.withArguments { args ->
//                    args << "-O2"
//                    args << "-lstdc++"
//                }
//            }
//        }
    }
}