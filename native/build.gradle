import org.gradle.internal.jvm.Jvm

plugins {
    id 'cpp-library'
    id 'cpp-unit-test'
}

library {
    baseName = "nativeGdi"

    binaries.whenElementFinalized { binary ->
        binary.compileTask.get().configure {
//            outputs.files.forEach { println "outputs.files: $it" }
            File javaHome = Jvm.current().javaHome
            compilerArgs.addAll([
                    "-I" + "$javaHome/include",
                    "-I" + "$javaHome/include/win32",
                    "-I" + "$javaHome/include/darwin",
                    "-I" + "$javaHome/include/linux",
                    "-I" + "$javaHome/include/freebsd"
            ])
        }
    }
}

unitTest {
    baseName = "greeterTest"
}

model {
    toolChains {
        gcc(Gcc) {
            eachPlatform {
                cppCompiler.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                }
                linker.withArguments { args ->
                    args << "-O2"
                    args << "-lgdi32"
                    args << "-lstdc++"
                }
            }
        }

        visualCpp(VisualCpp) { visual ->
            eachPlatform {
                linker.withArguments {args ->
                    args << "gdi32.lib"
                    args << "user32.lib"
                }
            }
        }
    }
}

def copyLib(toDir) {
    return tasks.create("copyLibrary", Copy) {
        from "$buildDir/lib/main/debug"
        into toDir
        include('**/*.dll')
        dependsOn "assemble"
    }
}
